// Adds a font to use
@font-face {
    font-family: digitAlt;
    src: url(assets/digitalt.woff);
    font-display: swap;
}

// Set height and width to max, background colour, no margin and padding. makes size variable to use in other places. It is the ratio of the calculator.
html {
    height: 100%;
    width: 100%;
    background-color: #1a2238;
    margin: 0;
    padding: 0;
    --size: var(--min);
    --min: min(72vh, 147.5vw)
}

// Remove padding on the body
body {
    margin: 0;
}

// Sets aspect ratio and the calculators colour, small padding and border to give it a nice outline
.calculator {
    position: relative;
    aspect-ratio: 49 / 73; //48 / 72 but both + 1 to account for the padding
    height: calc(var(--size) + 1vmin);
    background-color: #37448c;
    border-radius: calc(50%/4) / calc(50%/6);
    padding: 0.5vmin;
    box-sizing: border-box;
}

// Styling for all of the buttons, no padding and makes it take up all of the space with a small border.
.button {
  position: relative;
  padding: 0;
  width: 100%;
  height: 100%;
  border-radius: 10%;
  // Stops weirdness on mobile when clicking
  touch-action: manipulation;
}

// Sets some styling for halfway in the button like colour and hover effects and transitions.
.middle-button {
    height: 100%;
    padding: calc(var(--min) / 72 * 0.5);
    box-sizing: border-box;
    border-radius: inherit;
    color: #9db4f2;

    // On hover it changes colour slightly to be a bit more lighter
    @media (hover: hover) {
    :hover {
        transition: all 100ms ease-in;
        cursor: pointer;
        background-color: rgb(37, 48, 79);
        color: #acc0f5;
    }
}

    // When clicked it changes the colour of the button to be lighter instantly
    :active {
        transition: all 0s ease-in;
        background-color: rgb(43, 55, 87);
        color: #cbd7f9;
    }

    // After being clicked it fades back to what it was before
    #out:active {
        transition: all 200ms ease-in;
        background-color: rgb(43, 55, 87);
        color: #cbd7f9;
    }
}

// Take up all of the available space and remove padding and inherit the colour from the parent element for the text
.inner-button {
    display: block;
    width: 100%;
    height: 100%;
    border: none;
    color: inherit;
    background-color: #1a2238;
    padding: 0;

    p {
        color: inherit;
    }
}

// Basic font defaults, size, colour, font family
.text {
    font-size: calc(var(--min) / 72 * 5);
    color: #9db4f2;
    font-family: digitAlt, sans-serif;
}

// Max size available with no marhin and center text vertically.
.inner-output {
    width: 100%;
    height: 100%;
    margin: 0%;
    text-align: right;
    display: inline-block;
    line-height: calc(var(--min) / 72 * 11);
    vertical-align: middle;
}

// Change colour and add rounding on corners
.output {
    width: 100%;
    height: 100%;
    padding: 0% calc(var(--min) / 72 * 3) 0 calc(var(--min) / 72 * 3);
    margin: 0%;
    box-sizing: border-box;
    background-color: #1a2238;
    border-radius: 12.5%/50%;
}

// Add some padding on the inside
.outer-output {
    padding: calc(var(--min) / 72 * 0.5);
    box-sizing: border-box;
    width: 100%;
}

// Setup the grid for the buttons and output
.outer {
    position: absolute;
    display: grid;
    grid-template-areas:
    'output output      output          output        '
    'seven  eight       nine            division      '
    'four   five        six             multiplication'
    'one    two         three           subtraction   '
    'clear  zero        allclear        addition      '
    'modulo openbracket closebracket    equals        ';
    grid-template-columns: repeat(4, 1fr);
    grid-template-rows: repeat(6, 1fr);
    aspect-ratio: 4 / 6;
    height: var(--size);
}

// The styling and animation for the loading spinner
.loading {
    animation: rotate 2s linear infinite;
    width: calc(var(--min) / 72 * 10);
    height: calc(var(--min) / 72 * 10);
    
    & .path {
      stroke: #9db4f2;
      stroke-linecap: round;
      animation: dash 1.5s ease-in-out infinite;
    }
    
  }
  
  @keyframes rotate {
    100% {
      transform: rotate(360deg);
    }
  }
  
  @keyframes dash {
    0% {
      stroke-dasharray: 1, 150;
      stroke-dashoffset: 0;
    }
    50% {
      stroke-dasharray: 90, 150;
      stroke-dashoffset: -35;
    }
    100% {
      stroke-dasharray: 90, 150;
      stroke-dashoffset: -124;
    }
  }
  
// Centers divs
.center {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
}

// Setting up the names for the grid
.zero { grid-area: zero;}
.one { grid-area: one;}
.two { grid-area: two;}
.three { grid-area: three;}
.four { grid-area: four;}
.five { grid-area: five;}
.six { grid-area: six;}
.seven { grid-area: seven;}
.eight { grid-area: eight;}
.nine { grid-area: nine;}
.outer-output { grid-area: output;}
.clear { grid-area: clear;}
.allclear { grid-area: allclear;}
.equals { grid-area: equals;}
.addition { grid-area: addition;}
.subtraction { grid-area: subtraction;}
.multiplication { grid-area: multiplication;}
.division { grid-area: division;}
.modulo { grid-area: modulo;}
.openbracket { grid-area: openbracket;}
.closebracket { grid-area: closebracket;}